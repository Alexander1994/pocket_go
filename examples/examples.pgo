
   ;; A Tour of Pocket Go ;;


;; functions/primitives

(def x 1) ;; var definition

(+ 1 1) ;; arithmetic so far +, *, /, -

(defn x2 (x) (* x 2)) ;; functions, *note temporary scope defined in functions
(x2 4) ;; call to functions

(def answer_to_life 
    (defn ()           ;; anon functions
        42
    ) ) 

(answer_to_life)

(defn higher_fun (x) 
    (defn (y) (* x y)) ;; higher order functions, with js like closures
)
((higher_fun 8) 9) ;; returns 72

(set x 5) ;; set the var x to 5
(println x) ;; prints 5


;; logic

(def i 3)
(for i          ;; 0 evaluates to false, o.w. true!
    (println i)
    (set i (- i 1)) ;; sets value in i
)

(if (= i 0) (println 9001)) ;; value compairison op
(if i (println -1))

(def j x)
(if (eq j x) (println 1)) ;; ref compairison op
(if (> j i) (println 2)) ;; num compairison

(println '(hello world)) ;; sudo strings with quote primitive

(set i 1)


;; list ops

([] i '((happy halloween) (happy new year))) ;; indexing list literals
([:] j i '(lisp welcome to pocket go lists fists)) ;; sublist op


;; macros

(macro inc (i) 
    (println i)
    (set i (+ i 1))
    (println i)
    (println '(inked!))
) 

(def y 0)
(inc y)
(inc y)
(inc y)

(macro ifnot (num expr)
    (if (= num 0) expr)
)

(ifnot 1 (println '(macros are boring!) ) )
(ifnot 0 (println '(macros are neat!) ) )


;; goroutines!

(defn two () 
    (println 2)
)

(go two)
(sleep 750) ;; sleeps for 750ms

;; channels

(def channel chan)
(defn pow (x ch)
    (<- ch (* x x) ) ;; send to channel
)

(go pow 2 channel)
(def z (<- channel)) ;; receive from channel

(println z)


